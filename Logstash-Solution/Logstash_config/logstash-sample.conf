#Recieve logs sent by filebeat on port 5044
input {
  beats {
    port => 5044
  }
}
filter {
  # Grok filter to parse initial header and capture key value pairs in a placeholder field keyvaluemessage which will further be parsed
  grok {
    match => {
      "message" => [
        "<%{INT:priority}>%{INT:version} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{WORD:application} %{INT:process_id}%{SPACE}(-|msgid=\"%{GREEDYDATA:msgid}\")%{SPACE}(-|\[%{GREEDYDATA:context}\])%{SPACE}%{GREEDYDATA:keyvaluemessage}"
      ]
    }
  }

  # If key-value pairs exist in keyvaluemessage
  if [keyvaluemessage] =~ /=/ {
    # Handle alertname to capture anything between quotes
    grok {
      match => { "keyvaluemessage" => 'alertname="(?<alertname>[^"]+)"' }
    }

    # Apply the kv filter to parse keyvaluemessage(value split =, field split space)
    kv {
      source => "keyvaluemessage"
      field_split => " "
      value_split => "="
      prefix => "dynamic_"
    }

    # Translate severity values to labels
    translate {
      field => "dynamic_severity"
      destination => "severity"
      dictionary => {
        "1" => "critical"
        "2" => "high"
        "3" => "medium"
        "4" => "low"
        "5" => "info"
      }
      fallback => "unknown"
    }

    # Add extracted fields into new meaningful fields
    mutate {
      add_field => {
        "description" => "%{alertname}"
        "source_ip" => "%{dynamic_computerip}"
        "computername" => "%{dynamic_computername}"
      }
    }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => [
      "log", "input", "tags", "keyvaluemessage", "ecs", "message", 
      "alertname", "agent", "host", "@version", "@timestamp", "event", 
      "dynamic_alertname", "dynamic_computername", "dynamic_computerip", 
      "dynamic_severity", "context", "msgid","version","priority"
    ]
  }
}

output {
   #Output to file as json
   file {
     path => "C:\\Path\\Output\\output_file_logs.log"
     codec => json_lines
   }
}
